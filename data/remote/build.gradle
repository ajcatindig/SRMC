apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion ProjectConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion ProjectConfig.minSdkVersion
        targetSdkVersion ProjectConfig.targetSdkVersion
        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions {
        jvmTarget = javaVersion
    }

    kotlin {
        jvmToolchain(javaVersion.toInteger())
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.txt', 'META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md', 'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/DEPENDENCIES']
        }
    }
    namespace 'com.example.srmc.data.remote'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}

dependencies {
    // Core module
    implementation project(":core")

    // Retrofit
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"

    // JavaX Inject
    implementation "javax.inject:javax.inject:$javaxInjectVersion"

    // Moshi Retrofit Converter
    api "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // Testing
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "io.kotest:kotest-runner-junit5:$kotestVersion"
    testImplementation "io.kotest:kotest-assertions-core:$kotestVersion"
    testImplementation "io.kotest:kotest-property:$kotestVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    androidTestImplementation "io.mockk:mockk-android:$mockkVersion"
}
